/*
Copyright 2021 The OpenEBS Authors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "github.com/openebs/device-localpv/pkg/apis/openebs.io/device/v1alpha1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// DeviceVolumeLister helps list DeviceVolumes.
type DeviceVolumeLister interface {
	// List lists all DeviceVolumes in the indexer.
	List(selector labels.Selector) (ret []*v1alpha1.DeviceVolume, err error)
	// DeviceVolumes returns an object that can list and get DeviceVolumes.
	DeviceVolumes(namespace string) DeviceVolumeNamespaceLister
	DeviceVolumeListerExpansion
}

// deviceVolumeLister implements the DeviceVolumeLister interface.
type deviceVolumeLister struct {
	indexer cache.Indexer
}

// NewDeviceVolumeLister returns a new DeviceVolumeLister.
func NewDeviceVolumeLister(indexer cache.Indexer) DeviceVolumeLister {
	return &deviceVolumeLister{indexer: indexer}
}

// List lists all DeviceVolumes in the indexer.
func (s *deviceVolumeLister) List(selector labels.Selector) (ret []*v1alpha1.DeviceVolume, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.DeviceVolume))
	})
	return ret, err
}

// DeviceVolumes returns an object that can list and get DeviceVolumes.
func (s *deviceVolumeLister) DeviceVolumes(namespace string) DeviceVolumeNamespaceLister {
	return deviceVolumeNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// DeviceVolumeNamespaceLister helps list and get DeviceVolumes.
type DeviceVolumeNamespaceLister interface {
	// List lists all DeviceVolumes in the indexer for a given namespace.
	List(selector labels.Selector) (ret []*v1alpha1.DeviceVolume, err error)
	// Get retrieves the DeviceVolume from the indexer for a given namespace and name.
	Get(name string) (*v1alpha1.DeviceVolume, error)
	DeviceVolumeNamespaceListerExpansion
}

// deviceVolumeNamespaceLister implements the DeviceVolumeNamespaceLister
// interface.
type deviceVolumeNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all DeviceVolumes in the indexer for a given namespace.
func (s deviceVolumeNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.DeviceVolume, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.DeviceVolume))
	})
	return ret, err
}

// Get retrieves the DeviceVolume from the indexer for a given namespace and name.
func (s deviceVolumeNamespaceLister) Get(name string) (*v1alpha1.DeviceVolume, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("devicevolume"), name)
	}
	return obj.(*v1alpha1.DeviceVolume), nil
}
