/*
Copyright 2021 The OpenEBS Authors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "github.com/openebs/device-localpv/pkg/apis/openebs.io/device/v1alpha1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// DeviceNodeLister helps list DeviceNodes.
// All objects returned here must be treated as read-only.
type DeviceNodeLister interface {
	// List lists all DeviceNodes in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.DeviceNode, err error)
	// DeviceNodes returns an object that can list and get DeviceNodes.
	DeviceNodes(namespace string) DeviceNodeNamespaceLister
	DeviceNodeListerExpansion
}

// deviceNodeLister implements the DeviceNodeLister interface.
type deviceNodeLister struct {
	indexer cache.Indexer
}

// NewDeviceNodeLister returns a new DeviceNodeLister.
func NewDeviceNodeLister(indexer cache.Indexer) DeviceNodeLister {
	return &deviceNodeLister{indexer: indexer}
}

// List lists all DeviceNodes in the indexer.
func (s *deviceNodeLister) List(selector labels.Selector) (ret []*v1alpha1.DeviceNode, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.DeviceNode))
	})
	return ret, err
}

// DeviceNodes returns an object that can list and get DeviceNodes.
func (s *deviceNodeLister) DeviceNodes(namespace string) DeviceNodeNamespaceLister {
	return deviceNodeNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// DeviceNodeNamespaceLister helps list and get DeviceNodes.
// All objects returned here must be treated as read-only.
type DeviceNodeNamespaceLister interface {
	// List lists all DeviceNodes in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.DeviceNode, err error)
	// Get retrieves the DeviceNode from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.DeviceNode, error)
	DeviceNodeNamespaceListerExpansion
}

// deviceNodeNamespaceLister implements the DeviceNodeNamespaceLister
// interface.
type deviceNodeNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all DeviceNodes in the indexer for a given namespace.
func (s deviceNodeNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.DeviceNode, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.DeviceNode))
	})
	return ret, err
}

// Get retrieves the DeviceNode from the indexer for a given namespace and name.
func (s deviceNodeNamespaceLister) Get(name string) (*v1alpha1.DeviceNode, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("devicenode"), name)
	}
	return obj.(*v1alpha1.DeviceNode), nil
}
