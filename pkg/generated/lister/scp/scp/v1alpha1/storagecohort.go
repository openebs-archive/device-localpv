/*
Copyright 2021 The OpenEBS Authors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "github.com/openebs/device-localpv/pkg/apis/openebs.io/scp/v1alpha1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// StorageCohortLister helps list StorageCohorts.
// All objects returned here must be treated as read-only.
type StorageCohortLister interface {
	// List lists all StorageCohorts in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.StorageCohort, err error)
	// StorageCohorts returns an object that can list and get StorageCohorts.
	StorageCohorts(namespace string) StorageCohortNamespaceLister
	StorageCohortListerExpansion
}

// storageCohortLister implements the StorageCohortLister interface.
type storageCohortLister struct {
	indexer cache.Indexer
}

// NewStorageCohortLister returns a new StorageCohortLister.
func NewStorageCohortLister(indexer cache.Indexer) StorageCohortLister {
	return &storageCohortLister{indexer: indexer}
}

// List lists all StorageCohorts in the indexer.
func (s *storageCohortLister) List(selector labels.Selector) (ret []*v1alpha1.StorageCohort, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.StorageCohort))
	})
	return ret, err
}

// StorageCohorts returns an object that can list and get StorageCohorts.
func (s *storageCohortLister) StorageCohorts(namespace string) StorageCohortNamespaceLister {
	return storageCohortNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// StorageCohortNamespaceLister helps list and get StorageCohorts.
// All objects returned here must be treated as read-only.
type StorageCohortNamespaceLister interface {
	// List lists all StorageCohorts in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.StorageCohort, err error)
	// Get retrieves the StorageCohort from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.StorageCohort, error)
	StorageCohortNamespaceListerExpansion
}

// storageCohortNamespaceLister implements the StorageCohortNamespaceLister
// interface.
type storageCohortNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all StorageCohorts in the indexer for a given namespace.
func (s storageCohortNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.StorageCohort, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.StorageCohort))
	})
	return ret, err
}

// Get retrieves the StorageCohort from the indexer for a given namespace and name.
func (s storageCohortNamespaceLister) Get(name string) (*v1alpha1.StorageCohort, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("storagecohort"), name)
	}
	return obj.(*v1alpha1.StorageCohort), nil
}
