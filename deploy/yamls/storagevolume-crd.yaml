

##############################################
###########                       ############
###########   StorageVolume CRD      ############
###########                       ############
##############################################

# StorageVolume CRD is autogenerated via `make manifests` command.
# Do the modification in the code and run the `make manifests` command
# to generate the CRD definition

---
apiVersion: apiextensions.k8s.io/v1
kind: CustomResourceDefinition
metadata:
  annotations:
    controller-gen.kubebuilder.io/version: v0.4.0
  creationTimestamp: null
  name: storagevolumes.scp.openebs.io
spec:
  group: scp.openebs.io
  names:
    kind: StorageVolume
    listKind: StorageVolumeList
    plural: storagevolumes
    shortNames:
    - sv
    singular: storagevolume
  scope: Namespaced
  versions:
  - name: v1alpha1
    schema:
      openAPIV3Schema:
        properties:
          apiVersion:
            description: 'APIVersion defines the versioned schema of this representation
              of an object. Servers should convert recognized schemas to the latest
              internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'
            type: string
          kind:
            description: 'Kind is a string value representing the REST resource this
              object represents. Servers may infer this from the endpoint the client
              submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
            type: string
          metadata:
            type: object
          spec:
            description: StorageVolumeSpec defines the desired spec of StorageVolume
            properties:
              affinity:
                description: Affinity is a group of affinity scheduling rules
                properties:
                  cohortAffinity:
                    description: Using CohortAffinity we can schedule a volume in
                      a group of storage cohort. All cohortAffinity requirements are
                      ANDed together.
                    items:
                      description: A label selector is a label query over a set of
                        resources. The result of matchLabels and matchExpressions
                        are ANDed. An empty label selector matches all objects. A
                        null label selector matches no objects.
                      properties:
                        matchExpressions:
                          description: matchExpressions is a list of label selector
                            requirements. The requirements are ANDed.
                          items:
                            description: A label selector requirement is a selector
                              that contains values, a key, and an operator that relates
                              the key and values.
                            properties:
                              key:
                                description: key is the label key that the selector
                                  applies to.
                                type: string
                              operator:
                                description: operator represents a key's relationship
                                  to a set of values. Valid operators are In, NotIn,
                                  Exists and DoesNotExist.
                                type: string
                              values:
                                description: values is an array of string values.
                                  If the operator is In or NotIn, the values array
                                  must be non-empty. If the operator is Exists or
                                  DoesNotExist, the values array must be empty. This
                                  array is replaced during a strategic merge patch.
                                items:
                                  type: string
                                type: array
                            required:
                            - key
                            - operator
                            type: object
                          type: array
                        matchLabels:
                          additionalProperties:
                            type: string
                          description: matchLabels is a map of {key,value} pairs.
                            A single {key,value} in the matchLabels map is equivalent
                            to an element of matchExpressions, whose key field is
                            "key", the operator is "In", and the values array contains
                            only "value". The requirements are ANDed.
                          type: object
                      type: object
                    type: array
                  cohortAntiAffinity:
                    description: Using CohortAffinity we can avoid scheduling a volume
                      in a group of storage cohort. All cohortAntiAffinity requirements
                      are ANDed together.
                    items:
                      description: A label selector is a label query over a set of
                        resources. The result of matchLabels and matchExpressions
                        are ANDed. An empty label selector matches all objects. A
                        null label selector matches no objects.
                      properties:
                        matchExpressions:
                          description: matchExpressions is a list of label selector
                            requirements. The requirements are ANDed.
                          items:
                            description: A label selector requirement is a selector
                              that contains values, a key, and an operator that relates
                              the key and values.
                            properties:
                              key:
                                description: key is the label key that the selector
                                  applies to.
                                type: string
                              operator:
                                description: operator represents a key's relationship
                                  to a set of values. Valid operators are In, NotIn,
                                  Exists and DoesNotExist.
                                type: string
                              values:
                                description: values is an array of string values.
                                  If the operator is In or NotIn, the values array
                                  must be non-empty. If the operator is Exists or
                                  DoesNotExist, the values array must be empty. This
                                  array is replaced during a strategic merge patch.
                                items:
                                  type: string
                                type: array
                            required:
                            - key
                            - operator
                            type: object
                          type: array
                        matchLabels:
                          additionalProperties:
                            type: string
                          description: matchLabels is a map of {key,value} pairs.
                            A single {key,value} in the matchLabels map is equivalent
                            to an element of matchExpressions, whose key field is
                            "key", the operator is "In", and the values array contains
                            only "value". The requirements are ANDed.
                          type: object
                      type: object
                    type: array
                  topologySpreadConstraint:
                    description: TopologySpreadConstraints describes how a group of
                      volumes ought to spread across storage cohort topology. Scheduler
                      will schedule volumes in a way which abides by the constraints.
                      All TopologySpreadConstraints are ANDed.
                    items:
                      description: TopologySpreadConstraint specifies how to spread
                        matching pods among the given topology.
                      properties:
                        labelSelector:
                          description: LabelSelector is used to find matching pods.
                            Pods that match this label selector are counted to determine
                            the number of pods in their corresponding topology domain.
                          properties:
                            matchExpressions:
                              description: matchExpressions is a list of label selector
                                requirements. The requirements are ANDed.
                              items:
                                description: A label selector requirement is a selector
                                  that contains values, a key, and an operator that
                                  relates the key and values.
                                properties:
                                  key:
                                    description: key is the label key that the selector
                                      applies to.
                                    type: string
                                  operator:
                                    description: operator represents a key's relationship
                                      to a set of values. Valid operators are In,
                                      NotIn, Exists and DoesNotExist.
                                    type: string
                                  values:
                                    description: values is an array of string values.
                                      If the operator is In or NotIn, the values array
                                      must be non-empty. If the operator is Exists
                                      or DoesNotExist, the values array must be empty.
                                      This array is replaced during a strategic merge
                                      patch.
                                    items:
                                      type: string
                                    type: array
                                required:
                                - key
                                - operator
                                type: object
                              type: array
                            matchLabels:
                              additionalProperties:
                                type: string
                              description: matchLabels is a map of {key,value} pairs.
                                A single {key,value} in the matchLabels map is equivalent
                                to an element of matchExpressions, whose key field
                                is "key", the operator is "In", and the values array
                                contains only "value". The requirements are ANDed.
                              type: object
                          type: object
                        maxSkew:
                          description: 'MaxSkew describes the degree to which pods
                            may be unevenly distributed. When `whenUnsatisfiable=DoNotSchedule`,
                            it is the maximum permitted difference between the number
                            of matching pods in the target topology and the global
                            minimum. For example, in a 3-zone cluster, MaxSkew is
                            set to 1, and pods with the same labelSelector spread
                            as 1/1/0: | zone1 | zone2 | zone3 | |   P   |   P   |       |
                            - if MaxSkew is 1, incoming pod can only be scheduled
                            to zone3 to become 1/1/1; scheduling it onto zone1(zone2)
                            would make the ActualSkew(2-0) on zone1(zone2) violate
                            MaxSkew(1). - if MaxSkew is 2, incoming pod can be scheduled
                            onto any zone. When `whenUnsatisfiable=ScheduleAnyway`,
                            it is used to give higher precedence to topologies that
                            satisfy it. It''s a required field. Default value is 1
                            and 0 is not allowed.'
                          format: int32
                          type: integer
                        topologyKey:
                          description: TopologyKey is the key of node labels. Nodes
                            that have a label with this key and identical values are
                            considered to be in the same topology. We consider each
                            <key, value> as a "bucket", and try to put balanced number
                            of pods into each bucket. It's a required field.
                          type: string
                        whenUnsatisfiable:
                          description: 'WhenUnsatisfiable indicates how to deal with
                            a pod if it doesn''t satisfy the spread constraint. -
                            DoNotSchedule (default) tells the scheduler not to schedule
                            it. - ScheduleAnyway tells the scheduler to schedule the
                            pod in any location,   but giving higher precedence to
                            topologies that would help reduce the   skew. A constraint
                            is considered "Unsatisfiable" for an incoming pod if and
                            only if every possible node assigment for that pod would
                            violate "MaxSkew" on some topology. For example, in a
                            3-zone cluster, MaxSkew is set to 1, and pods with the
                            same labelSelector spread as 3/1/1: | zone1 | zone2 |
                            zone3 | | P P P |   P   |   P   | If WhenUnsatisfiable
                            is set to DoNotSchedule, incoming pod can only be scheduled
                            to zone2(zone3) to become 3/2/1(3/1/2) as ActualSkew(2-1)
                            on zone2(zone3) satisfies MaxSkew(1). In other words,
                            the cluster can still be imbalanced, but scheduler won''t
                            make it *more* imbalanced. It''s a required field.'
                          type: string
                      required:
                      - maxSkew
                      - topologyKey
                      - whenUnsatisfiable
                      type: object
                    type: array
                  volumeAffinity:
                    description: VolumeAffinity helps to place a volume in the same
                      topology(storage cohort) where old volumes are present, if old
                      volume not found the it can go to any cohort. Old volumes are
                      identified using LabelSelector. Using this we can ensure that
                      if any pod is requesting for 2 volumes then 2 volumes will be
                      scheduled in the same storage cohort topology. ie - if app-0
                      replica of sts app is requesting for 2 volumes data-0 and log-0,
                      both the volumes will be scheduled in the same storage cohort
                      topology. All volumeAffinity requirements are ANDed together.
                    items:
                      description: VolumeAffinityTerm specifies affinity requirements
                        for a StorageVolume
                      properties:
                        labelSelector:
                          description: A label query over a set of resources, in this
                            case storage volume.
                          properties:
                            matchExpressions:
                              description: matchExpressions is a list of label selector
                                requirements. The requirements are ANDed.
                              items:
                                description: A label selector requirement is a selector
                                  that contains values, a key, and an operator that
                                  relates the key and values.
                                properties:
                                  key:
                                    description: key is the label key that the selector
                                      applies to.
                                    type: string
                                  operator:
                                    description: operator represents a key's relationship
                                      to a set of values. Valid operators are In,
                                      NotIn, Exists and DoesNotExist.
                                    type: string
                                  values:
                                    description: values is an array of string values.
                                      If the operator is In or NotIn, the values array
                                      must be non-empty. If the operator is Exists
                                      or DoesNotExist, the values array must be empty.
                                      This array is replaced during a strategic merge
                                      patch.
                                    items:
                                      type: string
                                    type: array
                                required:
                                - key
                                - operator
                                type: object
                              type: array
                            matchLabels:
                              additionalProperties:
                                type: string
                              description: matchLabels is a map of {key,value} pairs.
                                A single {key,value} in the matchLabels map is equivalent
                                to an element of matchExpressions, whose key field
                                is "key", the operator is "In", and the values array
                                contains only "value". The requirements are ANDed.
                              type: object
                          type: object
                        topologyKey:
                          description: TopologyKey is the key of cohort labels. StorageCohort
                            that have a label with this key and identical values are
                            considered to be in the same topology.
                          type: string
                      type: object
                    type: array
                  volumeAntiAffinity:
                    description: VolumeAntiAffinity helps to place a volume in the
                      different topology(storage cohort) where old volumes are present,
                      if old volume not found the it can go to any cohort. Old volumes
                      are identified using LabelSelector. Using this we can ensure
                      that replicas of an application will have volume in different
                      storage cohort topology . ie - if app-0 and app-1 replica of
                      sts app is requesting for 2 volumes data-0 and data-1, both
                      the volumes will be scheduled in the different storage cohort
                      topology. All volumeAntiAffinity requirements are ANDed together.
                    items:
                      description: VolumeAffinityTerm specifies affinity requirements
                        for a StorageVolume
                      properties:
                        labelSelector:
                          description: A label query over a set of resources, in this
                            case storage volume.
                          properties:
                            matchExpressions:
                              description: matchExpressions is a list of label selector
                                requirements. The requirements are ANDed.
                              items:
                                description: A label selector requirement is a selector
                                  that contains values, a key, and an operator that
                                  relates the key and values.
                                properties:
                                  key:
                                    description: key is the label key that the selector
                                      applies to.
                                    type: string
                                  operator:
                                    description: operator represents a key's relationship
                                      to a set of values. Valid operators are In,
                                      NotIn, Exists and DoesNotExist.
                                    type: string
                                  values:
                                    description: values is an array of string values.
                                      If the operator is In or NotIn, the values array
                                      must be non-empty. If the operator is Exists
                                      or DoesNotExist, the values array must be empty.
                                      This array is replaced during a strategic merge
                                      patch.
                                    items:
                                      type: string
                                    type: array
                                required:
                                - key
                                - operator
                                type: object
                              type: array
                            matchLabels:
                              additionalProperties:
                                type: string
                              description: matchLabels is a map of {key,value} pairs.
                                A single {key,value} in the matchLabels map is equivalent
                                to an element of matchExpressions, whose key field
                                is "key", the operator is "In", and the values array
                                contains only "value". The requirements are ANDed.
                              type: object
                          type: object
                        topologyKey:
                          description: TopologyKey is the key of cohort labels. StorageCohort
                            that have a label with this key and identical values are
                            considered to be in the same topology.
                          type: string
                      type: object
                    type: array
                type: object
              capabilities:
                description: Capabilities stores the capabilities of a volume that
                  is passed through storage class
                properties:
                  IOConnectivity:
                    description: IOConnectivity describes capabilities to support
                      various IO Connectivity options i.e accessProtocols
                    properties:
                      accessProtocols:
                        description: AccessProtocols to be supported, viz NVMe, NVMeOverFabrics,
                          iSCSI
                        items:
                          description: AccessProtocol supported, viz NVMe, NVMeOverFabrics,
                            iSCSI
                          type: string
                        type: array
                    required:
                    - accessProtocols
                    type: object
                  IOPerformance:
                    description: IOPerformance describe the capabilities to support
                      various IO performance options.
                    properties:
                      averageIOOperationLatencyMicroseconds:
                        description: AverageIOOperationLatencyMicroseconds to be supported
                          or not.
                        format: int64
                        type: integer
                      maxIOPSPerTB:
                        description: maxIOOperationsPerSecondPerTerabyte to be supported
                          or not.
                        format: int64
                        type: integer
                      storageTier:
                        description: StorageTier is a classification of the service
                          based on several factors like performance, redundancy, availability,
                          etc. that can be used for pool or volume creation, viz Platinum,
                          Gold, Silver)
                        type: string
                    required:
                    - storageTier
                    type: object
                  dataProtection:
                    description: DataProtection describes data protection capabilities.
                    type: object
                  dataSecurity:
                    description: DataSecurity specifies security standards that is
                      supported.
                    properties:
                      dataSanitizationPolicy:
                        description: DataSanitizationPolicy to be supported, viz Clear,
                          CryptographicErase
                        items:
                          description: DataSanitizationPolicy specify the data sanitization
                            policy, viz None, Clear, CryptographicErase
                          type: string
                        type: array
                      mediaEncryption:
                        description: MediaEncryption to be supported or not, if yes
                          the algorithms
                        items:
                          type: string
                        type: array
                    type: object
                  dataStorage:
                    description: DataStorage specifies accessModes, provisioning,
                      multiPathing, compression and deduplication characteristics
                      supported by a pool or a volume.
                    properties:
                      accessModes:
                        description: AccessModes contains the actual access modes,
                          viz ReadWriteOnce, ReadOnlyMany, ReadWriteMany
                        items:
                          description: AccessMode of the pool or volume, viz ReadWriteOnce,
                            ReadOnlyMany and ReadWriteMany
                          type: string
                        type: array
                      compression:
                        description: Compression to be supported or not, if yes the
                          algorithm
                        items:
                          type: string
                        type: array
                      deduplication:
                        description: Deduplication to be supported or not.
                        type: boolean
                      multiPathing:
                        description: MultiPathing to be supported or not.
                        items:
                          description: MultiPathing specifies fault toleration type,
                            viz None, OnlineActive, OnlinePassive
                          type: string
                        type: array
                      provisioningPolicy:
                        description: ProvisioningPolicy defines provisioning policy
                          type, viz thick, thin
                        items:
                          description: ProvisioningPolicy specifies provisioning type,
                            viz thick, thin
                          type: string
                        type: array
                    required:
                    - accessModes
                    type: object
                required:
                - IOConnectivity
                - IOPerformance
                - dataStorage
                type: object
              capacity:
                anyOf:
                - type: integer
                - type: string
                description: Capacity of the volume
                pattern: ^(\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))))?$
                x-kubernetes-int-or-string: true
              parameters:
                additionalProperties:
                  type: string
                description: Parameters holds the configuration that is required at
                  the time of volume creation Can be nvme or iscsi specific configurations
                type: object
              storageCohortReference:
                description: StorageCohortReference points to the pre-existing StorageCohort
                  resource
                properties:
                  apiVersion:
                    description: API version of the referent.
                    type: string
                  fieldPath:
                    description: 'If referring to a piece of an object instead of
                      an entire object, this string should contain a valid JSON/Go
                      field access statement, such as desiredState.manifest.containers[2].
                      For example, if the object reference is to a container within
                      a pod, this would take on a value like: "spec.containers{name}"
                      (where "name" refers to the name of the container that triggered
                      the event) or if no container name is specified "spec.containers[2]"
                      (container with index 2 in this pod). This syntax is chosen
                      only to have some well-defined way of referencing a part of
                      an object. TODO: this design is not final and this field is
                      subject to change in the future.'
                    type: string
                  kind:
                    description: 'Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
                    type: string
                  name:
                    description: 'Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names'
                    type: string
                  namespace:
                    description: 'Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/'
                    type: string
                  resourceVersion:
                    description: 'Specific resourceVersion to which this reference
                      is made, if any. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency'
                    type: string
                  uid:
                    description: 'UID of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids'
                    type: string
                type: object
              storagePoolReference:
                description: StoragePoolReference points to the pre-existing StoragePool
                  resource
                properties:
                  apiVersion:
                    description: API version of the referent.
                    type: string
                  fieldPath:
                    description: 'If referring to a piece of an object instead of
                      an entire object, this string should contain a valid JSON/Go
                      field access statement, such as desiredState.manifest.containers[2].
                      For example, if the object reference is to a container within
                      a pod, this would take on a value like: "spec.containers{name}"
                      (where "name" refers to the name of the container that triggered
                      the event) or if no container name is specified "spec.containers[2]"
                      (container with index 2 in this pod). This syntax is chosen
                      only to have some well-defined way of referencing a part of
                      an object. TODO: this design is not final and this field is
                      subject to change in the future.'
                    type: string
                  kind:
                    description: 'Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
                    type: string
                  name:
                    description: 'Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names'
                    type: string
                  namespace:
                    description: 'Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/'
                    type: string
                  resourceVersion:
                    description: 'Specific resourceVersion to which this reference
                      is made, if any. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency'
                    type: string
                  uid:
                    description: 'UID of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids'
                    type: string
                type: object
              storageProvisioner:
                description: StorageProvisioner specifies the provisioner name that
                  is responsible for volume provisioning tasks.
                type: string
            required:
            - capabilities
            - capacity
            type: object
          status:
            description: StorageVolumeStatus defines the observed state of StorageVolume
            properties:
              capacity:
                description: Capacity stores total, used and available size
                properties:
                  available:
                    anyOf:
                    - type: integer
                    - type: string
                    description: Available represents available size of the volume
                    pattern: ^(\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))))?$
                    x-kubernetes-int-or-string: true
                  total:
                    anyOf:
                    - type: integer
                    - type: string
                    description: Total represents total size of volume
                    pattern: ^(\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))))?$
                    x-kubernetes-int-or-string: true
                  used:
                    anyOf:
                    - type: integer
                    - type: string
                    description: Used represents used size of the volume
                    pattern: ^(\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))))?$
                    x-kubernetes-int-or-string: true
                type: object
              condition:
                description: Phase defines the state of the volume
                items:
                  description: StorageVolumeCondition contains condition information
                    for a StorageVolume.
                  properties:
                    lastTransitionTime:
                      description: Last time the condition transitioned from one status
                        to another.
                      format: date-time
                      type: string
                    lastUpdateTime:
                      description: The last time this condition was updated.
                      format: date-time
                      type: string
                    message:
                      description: A human readable message indicating details about
                        the transition.
                      type: string
                    reason:
                      description: The reason for the condition's last transition.
                      type: string
                    status:
                      description: Status of the condition, one of True, False, Unknown.
                      type: string
                    type:
                      description: Type is the type of the condition.
                      type: string
                  required:
                  - status
                  - type
                  type: object
                type: array
              targetInfo:
                description: TargetInfo defines the target information i.e nqn, targetIP
                  and status
                items:
                  additionalProperties:
                    type: string
                  type: object
                type: array
            type: object
        required:
        - spec
        type: object
    served: true
    storage: true
status:
  acceptedNames:
    kind: ""
    plural: ""
  conditions: []
  storedVersions: []
